import hashlib
import time
from multiprocessing import Pool, cpu_count

def mine_block(args):
    prefix, nonce = args
    input_str = f"Code Companion Block #{nonce}"
    hash_result = hashlib.sha256(input_str.encode()).hexdigest()
    return hash_result.startswith(prefix), hash_result, nonce

def simple_mining_optimized(difficulty, processes=None):
    prefix = '0' * difficulty
    if processes is None:
        processes = cpu_count()  # Use as many processes as there are CPU cores

    pool = Pool(processes=processes)
    nonce = 0  # Start with nonce zero
    start_time = time.time()
    
    while True:
        # Create a batch of tasks for multiprocessing
        tasks = [(prefix, nonce + i) for i in range(10000)]  # Batch of 10,000 for example
        results = pool.map(mine_block, tasks)
        
        # Check results for a match
        for found, hash_result, nonce in results:
            if found:
                time_taken = time.time() - start_time
                print(f"Hash found: {hash_result}")
                print(f"Nonce: {nonce}")
                print(f"Time taken: {time_taken} seconds")
                pool.close()
                pool.join()
                return
        
        # Increment the nonce for the next batch
        nonce += 10000

# Adjust these parameters as needed
difficulty_level = 4  # Difficulty level, increase for more complexity
process_count = 4  # Number of processes to use, can be set to None for auto-detection
simple_mining_optimized(difficulty_level, process_count)
